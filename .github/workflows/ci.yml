name: CI Layers
on:
  pull_request:
    branches:
     - dev
     - release
     - prod
     - crafting

env:
  DEV_REGION: sa-east-1  
  RELEASE_REGION: us-east-1
  PROD_REGION: us-east-1

jobs:
  get-stage-and-region:
    name: Get Stage And Region by Branch
    runs-on: ubuntu-latest
    outputs:
      region: ${{ steps.stage-and-region.outputs.region }}
      stage: ${{ steps.stage-and-region.outputs.stage }}
    steps:
      - name: Get Current Branch
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_current_branch

      - name: Set Region For Dev
        run: |
          echo "STAGE=dev" >> $GITHUB_ENV
          echo "REGION=$DEV_REGION" >> $GITHUB_ENV
        if: ${{ steps.extract_current_branch.outputs.branch == 'dev' }}

      - name: Set Region For Crafting
        run: |
          echo "STAGE=dev" >> $GITHUB_ENV
          echo "REGION=$DEV_REGION" >> $GITHUB_ENV
        if: ${{ steps.extract_current_branch.outputs.branch == 'crafting' }}

      - name: Set Region For Release
        run: |
          echo "STAGE=release" >> $GITHUB_ENV
          echo "REGION=$RELEASE_REGION" >> $GITHUB_ENV
        if: ${{ steps.extract_current_branch.outputs.branch == 'release' }}

      - name: Set Region For Production
        run: |
          echo "STAGE=prod" >> $GITHUB_ENV
          echo "REGION=$PROD_REGION" >> $GITHUB_ENV
        if: ${{ steps.extract_current_branch.outputs.branch == 'main' }}

      - name: Get Stage And Region
        id: stage-and-region
        run: |
          STAGE="${{ env.STAGE }}"
          REGION="${{ env.REGION }}"
          if [ -z "$STAGE" ]; then
            STAGE="dev"
          fi
          if [ -z "$REGION" ]; then
            REGION="$DEV_REGION"
          fi
          echo "::set-output name=stage::$( echo "$STAGE" )"
          echo "::set-output name=region::$( echo "$REGION" )"
  
  changes:
    name: Changes
    runs-on: ubuntu-latest
    outputs:
      folders: ${{ steps.filter.outputs.folders }}
    steps:
      - uses: actions/checkout@v2
      - name: Check changed files
        id: diff
        run: |
          git fetch origin ${{ github.event.before }} --depth=1
          CURRENT_GITHUB_SHA=$GITHUB_SHA
          BEFORE_GITHUB_SHA=${{ github.event.before }}
          export DIFF=$( git diff --diff-filter=d --name-only $BEFORE_GITHUB_SHA $CURRENT_GITHUB_SHA )
          if [ -z "${{ github.event.before }}" ]; then
            git checkout dev
            BEFORE_GITHUB_SHA=${{ github.event.before }}
            export DIFF=$( git diff --diff-filter=d --name-only $BEFORE_GITHUB_SHA $CURRENT_GITHUB_SHA )
          fi
          echo "Diff between $BEFORE_GITHUB_SHA and $GITHUB_SHA"
          echo "$DIFF"
          echo "::set-output name=diff::$( echo "$DIFF" | sed ':a;N;$!ba;s/\n/%0A/g' )" 
      - name: Set matrix for build
        id: filter
        run: |
          DIFF="${{ steps.diff.outputs.diff }}"
          if [ -z "$DIFF" ]; then
            echo "::set-output name=folders::[]"
          else
            JSON="["
            # Loop by lines
            while read path; do
              # Set $directory to substring before /
              directory="$( echo $path | cut -d'/' -f1 -s )"
            # ignore .github folder
            if [[ "$directory" != ".github" ]]; then
              # Add build to the matrix only if it is not already included
              JSONline="\"$directory\","
              if [[ "$JSON" != *"$JSONline"* ]]; then
                JSON="$JSON$JSONline"
              fi
            fi
            done <<< "$DIFF"
            # Remove last "," and add closing brackets
            if [[ $JSON == *, ]]; then
              JSON="${JSON%?}"
            fi
            JSON="$JSON]"
            echo $JSON
            # Set output
            echo "::set-output name=folders::$( echo "$JSON" )"
          fi

  tests:
    needs: [changes, get-stage-and-region]
    name: Tests
    if: ${{ needs.changes.outputs.folders != '[]' && needs.changes.outputs.folders != '' }}
    strategy:
      matrix:
        folder: ${{ fromJSON(needs.changes.outputs.folders) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.get-stage-and-region.outputs.region }}
      - name: Setup Python
        uses: actions/setup-python@v3        
        with:
          python-version: '3.9'
      
      - name: Comprobe Tests Files
        working-directory: ${{ matrix.folder }}
        id: comprobe_tests_files
        run: |
          DIR="tests/"
          if [ -d "$DIR" ]
          then
              if [ ! "$(ls -A $DIR)" ]; then
                  echo "$DIR tests is Empty"
                  exit 1
              elif ! compgen -G "${DIR}/*_test.py" > /dev/null; then
                  echo "In $DIR directory does not have test files."
                  exit 1
              fi
          else
              echo "Directory $DIR not found."
          fi

      - name: Test Function
        working-directory: ${{ matrix.folder }}
        id: run_tests
        run: |
          pip -q install pycodestyle
          python -m unittest discover ./tests/ "*_test.py"

      # - name: Send Success Deploy Slack Message
      #   continue-on-error: true
      #   if: ${{ job.status == 'success' }}
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_COLOR: ${{ job.status }}
      #     SLACK_TITLE: Resultado Test
      #     SLACK_MESSAGE: Pruebas exitosas para ${{steps.run_tests.outputs.mix-test}}
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #     SLACK_FOOTER: 'Tech'
      
      # - name: Send Error Deploy Slack Message
      #   continue-on-error: true
      #   if: failure()
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_COLOR: ${{ job.status }}
      #     SLACK_TITLE: Resultado
      #     SLACK_MESSAGE: Fallaron las pruebas para ${{steps.run_tests.outputs.mix-test}}
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #     SLACK_FOOTER: 'Tech'

  # get-pr-link:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     link: ${{ steps.get-link-pr.outputs.link }}      
  #   steps:
  #     - name: test PR
  #       id: get-link-pr
  #       run: |
  #         LINK="https://github.com/${GITHUB_REPOSITORY}/pull/${{ github.event.number }}"
  #         echo "::set-output name=link::$( echo "$LINK" )"          
  # send-slack-message:
  #   runs-on: ubuntu-latest
  #   needs: ["get-pr-link"]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: send a slack message
  #       uses: ./.github/actions/slack
  #       with:
  #         slack_webhook: ${{ secrets.SLACK_WEBHOOK }}
  #         title: ":pr: Creaci√≥n de PR para CR"
  #         message: "Se ha creado el <${{ needs.get-pr-link.outputs.link }}|siguiente> PR"
  # run-unit-tests:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Checkout
  #      uses: actions/checkout@v1
  #    - name: Test file
  #      run: |
  #         python stack_project_1/services/project_1/lambda_1/test_name_function.py
  

    